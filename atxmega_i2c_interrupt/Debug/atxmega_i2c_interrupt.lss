
atxmega_i2c_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  00000668  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00802020  00802020  0000071c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000074c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f9d  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000209b  00000000  00000000  00003861  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce7  00000000  00000000  000058fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  000065e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d9c  00000000  00000000  000068cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a43  00000000  00000000  00008668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000090ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_11>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 32       	cpi	r26, 0x20	; 32
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	20 e2       	ldi	r18, 0x20	; 32
  d0:	a0 e2       	ldi	r26, 0x20	; 32
  d2:	b0 e2       	ldi	r27, 0x20	; 32
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ad 32       	cpi	r26, 0x2D	; 45
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  e2:	0c 94 32 03 	jmp	0x664	; 0x664 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <Clock_Init>:
    // CCP = CCP_IOREG_gc;
    // CLK.CTRL = CLK_SCLKSEL_RC32M_gc;

    /*** PLL to more acurate Clock **/

    OSC.CTRL |= OSC_RC32MEN_bm;
  ea:	e0 e5       	ldi	r30, 0x50	; 80
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24
    while (!(OSC.STATUS & OSC_RC32MRDY_bm))
  f4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7f7051>
  f8:	81 ff       	sbrs	r24, 1
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <Clock_Init+0xa>
        ;

    OSC.PLLCTRL = OSC_PLLSRC_RC32M_gc | 0x04;
  fc:	e0 e5       	ldi	r30, 0x50	; 80
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	85 83       	std	Z+5, r24	; 0x05

    OSC.CTRL |= OSC_PLLEN_bm;
 104:	80 81       	ld	r24, Z
 106:	80 61       	ori	r24, 0x10	; 16
 108:	80 83       	st	Z, r24
    while (!(OSC.STATUS & OSC_PLLRDY_bm))
 10a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7f7051>
 10e:	84 ff       	sbrs	r24, 4
 110:	fc cf       	rjmp	.-8      	; 0x10a <Clock_Init+0x20>
        ;

    CCP      = CCP_IOREG_gc;
 112:	88 ed       	ldi	r24, 0xD8	; 216
 114:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_PLL_gc;
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7f7040>
 11c:	08 95       	ret

0000011e <TWIM_Send>:
		;
	return TWIM_Status();
}

TWI_MasterStatus_t TWIM_Send(uint8_t DeviceAddress, uint8_t Register, uint8_t Bytes, uint8_t* Data) {
	TWIM_Transmit(DeviceAddress, Register, Bytes, Data);
 11e:	0e 94 c1 02 	call	0x582	; 0x582 <TWIM_Transmit>
	while (!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)))
 122:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TWIM_Status>
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	21 f0       	breq	.+8      	; 0x132 <TWIM_Send+0x14>
 12a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TWIM_Status>
 12e:	8f 3f       	cpi	r24, 0xFF	; 255
 130:	c1 f7       	brne	.-16     	; 0x122 <TWIM_Send+0x4>
		;
	return TWIM_Status();
 132:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TWIM_Status>
}
 136:	08 95       	ret

00000138 <main>:

int main(void) {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	2a 97       	sbiw	r28, 0x0a	; 10
 142:	cd bf       	out	0x3d, r28	; 61
 144:	de bf       	out	0x3e, r29	; 62
	Clock_Init();
 146:	0e 94 75 00 	call	0xea	; 0xea <Clock_Init>
	PCCommunication_Init_DF(57600);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	91 ee       	ldi	r25, 0xE1	; 225
 14e:	0e 94 41 01 	call	0x282	; 0x282 <PCCommunication_Init_DF>
	volatile uint8_t dummy = 0;
 152:	19 82       	std	Y+1, r1	; 0x01

	TWIM_InitInterrupt();
 154:	0e 94 b5 02 	call	0x56a	; 0x56a <TWIM_InitInterrupt>

	volatile TWI_MasterStatus_t statue_check;
	volatile uint8_t adress_found[8];
	PMIC.CTRL = PMIC_LOLVLEN_bm;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f70a2>
	sei();
 15e:	78 94       	sei
	//PCCommunication_Init();

	while (1) {
		//try to build scanner function:
		uint8_t i_d = 0;
		for (uint8_t i = 0; i < 127; i++) {
 160:	10 e0       	ldi	r17, 0x00	; 0
	sei();
	//PCCommunication_Init();

	while (1) {
		//try to build scanner function:
		uint8_t i_d = 0;
 162:	00 e0       	ldi	r16, 0x00	; 0
		for (uint8_t i = 0; i < 127; i++) {
 164:	1d c0       	rjmp	.+58     	; 0x1a0 <main+0x68>
			statue_check = TWIM_Send(i, 0x00, 0x01, 0x00);
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	81 2f       	mov	r24, r17
 170:	0e 94 8f 00 	call	0x11e	; 0x11e <TWIM_Send>
 174:	8a 83       	std	Y+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	89 ef       	ldi	r24, 0xF9	; 249
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x44>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x4e>
 186:	00 00       	nop
			_delay_ms(10);
			if (statue_check != TWI_MASTER_ERROR) {
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	8f 3f       	cpi	r24, 0xFF	; 255
 18c:	41 f0       	breq	.+16     	; 0x19e <main+0x66>
				adress_found[i_d] = i;
 18e:	e3 e0       	ldi	r30, 0x03	; 3
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ec 0f       	add	r30, r28
 194:	fd 1f       	adc	r31, r29
 196:	e0 0f       	add	r30, r16
 198:	f1 1d       	adc	r31, r1
 19a:	10 83       	st	Z, r17
				i_d++;
 19c:	0f 5f       	subi	r16, 0xFF	; 255
	//PCCommunication_Init();

	while (1) {
		//try to build scanner function:
		uint8_t i_d = 0;
		for (uint8_t i = 0; i < 127; i++) {
 19e:	1f 5f       	subi	r17, 0xFF	; 255
 1a0:	1f 37       	cpi	r17, 0x7F	; 127
 1a2:	08 f3       	brcs	.-62     	; 0x166 <main+0x2e>
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	2b c0       	rjmp	.+86     	; 0x1fe <main+0xc6>
				i_d++;
			}
		}
		for (uint8_t add=0; add < 8; add++) {

			if (adress_found[add]>0) {
 1a8:	e1 2e       	mov	r14, r17
 1aa:	f1 2c       	mov	r15, r1
 1ac:	e3 e0       	ldi	r30, 0x03	; 3
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ec 0f       	add	r30, r28
 1b2:	fd 1f       	adc	r31, r29
 1b4:	ee 0d       	add	r30, r14
 1b6:	ff 1d       	adc	r31, r15
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	f9 f0       	breq	.+62     	; 0x1fc <main+0xc4>
				UART_Transmit_string("the first Device that found : ");
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e2       	ldi	r25, 0x20	; 32
 1c2:	0e 94 15 01 	call	0x22a	; 0x22a <UART_Transmit_string>
				PCCommunication_SendByte('x');
 1c6:	88 e7       	ldi	r24, 0x78	; 120
 1c8:	0e 94 0e 01 	call	0x21c	; 0x21c <PCCommunication_SendByte>
				printHexByte(adress_found[add]);
 1cc:	e3 e0       	ldi	r30, 0x03	; 3
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	ec 0f       	add	r30, r28
 1d2:	fd 1f       	adc	r31, r29
 1d4:	ee 0d       	add	r30, r14
 1d6:	ff 1d       	adc	r31, r15
 1d8:	80 81       	ld	r24, Z
 1da:	0e 94 31 01 	call	0x262	; 0x262 <printHexByte>
				PCCommunication_SendByte('\n');
 1de:	8a e0       	ldi	r24, 0x0A	; 10
 1e0:	0e 94 0e 01 	call	0x21c	; 0x21c <PCCommunication_SendByte>
				PCCommunication_SendByte('\r');
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	0e 94 0e 01 	call	0x21c	; 0x21c <PCCommunication_SendByte>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	81 ee       	ldi	r24, 0xE1	; 225
 1ee:	94 e0       	ldi	r25, 0x04	; 4
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0xb8>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xc2>
 1fa:	00 00       	nop
			if (statue_check != TWI_MASTER_ERROR) {
				adress_found[i_d] = i;
				i_d++;
			}
		}
		for (uint8_t add=0; add < 8; add++) {
 1fc:	1f 5f       	subi	r17, 0xFF	; 255
 1fe:	18 30       	cpi	r17, 0x08	; 8
 200:	98 f2       	brcs	.-90     	; 0x1a8 <main+0x70>
				_delay_ms(50);

			}

		}
		dummy++;
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	8b e7       	ldi	r24, 0x7B	; 123
 20c:	92 e9       	ldi	r25, 0x92	; 146
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0xd6>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0xe0>
 218:	00 00       	nop
 21a:	a2 cf       	rjmp	.-188    	; 0x160 <main+0x28>

0000021c <PCCommunication_SendByte>:
		divider = divider / 10;

		if (divider == 0)
			break;
	}
}
 21c:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f78c1>
 220:	95 ff       	sbrs	r25, 5
 222:	fc cf       	rjmp	.-8      	; 0x21c <PCCommunication_SendByte>
 224:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f78c0>
 228:	08 95       	ret

0000022a <UART_Transmit_string>:
	PCCommunication_SendByte(nibbleToHexCharacter(nibble));
	nibble = byte & 0b00001111;
	PCCommunication_SendByte(nibbleToHexCharacter(nibble));
}

void UART_Transmit_string(char string[]) {
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	8c 01       	movw	r16, r24
	int i = 0;
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
	while (string[i] > 0)
 238:	03 c0       	rjmp	.+6      	; 0x240 <UART_Transmit_string+0x16>
		PCCommunication_SendByte(string[i++]);
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	0e 94 0e 01 	call	0x21c	; 0x21c <PCCommunication_SendByte>
	PCCommunication_SendByte(nibbleToHexCharacter(nibble));
}

void UART_Transmit_string(char string[]) {
	int i = 0;
	while (string[i] > 0)
 240:	f8 01       	movw	r30, r16
 242:	ec 0f       	add	r30, r28
 244:	fd 1f       	adc	r31, r29
 246:	80 81       	ld	r24, Z
 248:	81 11       	cpse	r24, r1
 24a:	f7 cf       	rjmp	.-18     	; 0x23a <UART_Transmit_string+0x10>
		PCCommunication_SendByte(string[i++]);
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
	/* Converts 4 bits into hexadecimal */
	if (nibble < 10) {
 256:	8a 30       	cpi	r24, 0x0A	; 10
 258:	10 f4       	brcc	.+4      	; 0x25e <nibbleToHexCharacter+0x8>
		return ('0' + nibble);
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	08 95       	ret
	} else {
		return ('7' + nibble);
 25e:	89 5c       	subi	r24, 0xC9	; 201
	}
}
 260:	08 95       	ret

00000262 <printHexByte>:
		if (divider == 0)
			break;
	}
}

void printHexByte(uint8_t byte) {
 262:	cf 93       	push	r28
 264:	c8 2f       	mov	r28, r24
	/* Prints a byte as its hexadecimal equivalent */
	uint8_t nibble;
	nibble = (byte & 0b11110000) >> 4;
	PCCommunication_SendByte(nibbleToHexCharacter(nibble));
 266:	82 95       	swap	r24
 268:	8f 70       	andi	r24, 0x0F	; 15
 26a:	0e 94 2b 01 	call	0x256	; 0x256 <nibbleToHexCharacter>
 26e:	0e 94 0e 01 	call	0x21c	; 0x21c <PCCommunication_SendByte>
	nibble = byte & 0b00001111;
	PCCommunication_SendByte(nibbleToHexCharacter(nibble));
 272:	8c 2f       	mov	r24, r28
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	0e 94 2b 01 	call	0x256	; 0x256 <nibbleToHexCharacter>
 27a:	0e 94 0e 01 	call	0x21c	; 0x21c <PCCommunication_SendByte>
}
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <PCCommunication_Init_DF>:
	} else {
		return ('7' + nibble);
	}
}

void PCCommunication_Init_DF(uint16_t baudrate) {
 282:	8f 92       	push	r8
 284:	9f 92       	push	r9
 286:	af 92       	push	r10
 288:	bf 92       	push	r11
 28a:	cf 92       	push	r12
 28c:	df 92       	push	r13
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
	PORTC.DIRSET = PIN3_bm;
 298:	e0 e4       	ldi	r30, 0x40	; 64
 29a:	f6 e0       	ldi	r31, 0x06	; 6
 29c:	28 e0       	ldi	r18, 0x08	; 8
 29e:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRCLR = PIN2_bm;
 2a0:	24 e0       	ldi	r18, 0x04	; 4
 2a2:	22 83       	std	Z+2, r18	; 0x02
	uint32_t ratio;
	uint32_t min_rate;
	uint32_t max_rate;

	uint32_t cpu_hz = F_CPU;
	uint32_t baud   = baudrate;
 2a4:	a0 e0       	ldi	r26, 0x00	; 0
 2a6:	b0 e0       	ldi	r27, 0x00	; 0

	/* double speed is disabled. */
	max_rate /= 2;
	min_rate /= 2;

	if ((baud > max_rate) || (baud < min_rate)) {
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	91 05       	cpc	r25, r1
 2ac:	a1 05       	cpc	r26, r1
 2ae:	b1 05       	cpc	r27, r1
 2b0:	08 f4       	brcc	.+2      	; 0x2b4 <PCCommunication_Init_DF+0x32>
 2b2:	b2 c0       	rjmp	.+356    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		/* the hardware doesn't supports the given baud rate */
		return -1;
	}

	/* double speed is disabled. */
	baud *= 2;
 2b4:	6c 01       	movw	r12, r24
 2b6:	7d 01       	movw	r14, r26
 2b8:	cc 0c       	add	r12, r12
 2ba:	dd 1c       	adc	r13, r13
 2bc:	ee 1c       	adc	r14, r14
 2be:	ff 1c       	adc	r15, r15

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	78 e4       	ldi	r23, 0x48	; 72
 2c4:	88 ee       	ldi	r24, 0xE8	; 232
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	a7 01       	movw	r20, r14
 2ca:	96 01       	movw	r18, r12
 2cc:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodsi4>
 2d0:	da 01       	movw	r26, r20
 2d2:	c9 01       	movw	r24, r18

	/* double speed is disabled. */
	baud *= 2;

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
 2d4:	4f ef       	ldi	r20, 0xFF	; 255
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	70 e0       	ldi	r23, 0x00	; 0
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 2dc:	c9 ef       	ldi	r28, 0xF9	; 249
 2de:	0d c0       	rjmp	.+26     	; 0x2fa <PCCommunication_Init_DF+0x78>
		if (ratio < limit) {
 2e0:	84 17       	cp	r24, r20
 2e2:	95 07       	cpc	r25, r21
 2e4:	a6 07       	cpc	r26, r22
 2e6:	b7 07       	cpc	r27, r23
 2e8:	50 f0       	brcs	.+20     	; 0x2fe <PCCommunication_Init_DF+0x7c>
			break;
		}

		limit <<= 1;
 2ea:	44 0f       	add	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	66 1f       	adc	r22, r22
 2f0:	77 1f       	adc	r23, r23

		if (exp < -3) {
 2f2:	cd 3f       	cpi	r28, 0xFD	; 253
 2f4:	0c f4       	brge	.+2      	; 0x2f8 <PCCommunication_Init_DF+0x76>
			limit |= 1;
 2f6:	41 60       	ori	r20, 0x01	; 1

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 2f8:	cf 5f       	subi	r28, 0xFF	; 255
 2fa:	c7 30       	cpi	r28, 0x07	; 7
 2fc:	8c f3       	brlt	.-30     	; 0x2e0 <PCCommunication_Init_DF+0x5e>
		if (exp < -3) {
			limit |= 1;
		}
	}

	if (exp < 0) {
 2fe:	cc 23       	and	r28, r28
 300:	0c f0       	brlt	.+2      	; 0x304 <PCCommunication_Init_DF+0x82>
 302:	56 c0       	rjmp	.+172    	; 0x3b0 <PCCommunication_Init_DF+0x12e>
		cpu_hz -= 8 * baud;
 304:	97 01       	movw	r18, r14
 306:	86 01       	movw	r16, r12
 308:	00 0f       	add	r16, r16
 30a:	11 1f       	adc	r17, r17
 30c:	22 1f       	adc	r18, r18
 30e:	33 1f       	adc	r19, r19
 310:	00 0f       	add	r16, r16
 312:	11 1f       	adc	r17, r17
 314:	22 1f       	adc	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	00 0f       	add	r16, r16
 31a:	11 1f       	adc	r17, r17
 31c:	22 1f       	adc	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	98 e4       	ldi	r25, 0x48	; 72
 324:	a8 ee       	ldi	r26, 0xE8	; 232
 326:	b1 e0       	ldi	r27, 0x01	; 1
 328:	80 1b       	sub	r24, r16
 32a:	91 0b       	sbc	r25, r17
 32c:	a2 0b       	sbc	r26, r18
 32e:	b3 0b       	sbc	r27, r19

		if (exp <= -3) {
 330:	ce 3f       	cpi	r28, 0xFE	; 254
 332:	f4 f4       	brge	.+60     	; 0x370 <PCCommunication_Init_DF+0xee>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 334:	2d ef       	ldi	r18, 0xFD	; 253
 336:	3f ef       	ldi	r19, 0xFF	; 255
 338:	2c 1b       	sub	r18, r28
 33a:	31 09       	sbc	r19, r1
 33c:	c7 fd       	sbrc	r28, 7
 33e:	33 95       	inc	r19
 340:	04 c0       	rjmp	.+8      	; 0x34a <PCCommunication_Init_DF+0xc8>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	aa 1f       	adc	r26, r26
 348:	bb 1f       	adc	r27, r27
 34a:	2a 95       	dec	r18
 34c:	d2 f7       	brpl	.-12     	; 0x342 <PCCommunication_Init_DF+0xc0>
 34e:	97 01       	movw	r18, r14
 350:	86 01       	movw	r16, r12
 352:	36 95       	lsr	r19
 354:	27 95       	ror	r18
 356:	17 95       	ror	r17
 358:	07 95       	ror	r16
 35a:	bc 01       	movw	r22, r24
 35c:	cd 01       	movw	r24, r26
 35e:	60 0f       	add	r22, r16
 360:	71 1f       	adc	r23, r17
 362:	82 1f       	adc	r24, r18
 364:	93 1f       	adc	r25, r19
 366:	a7 01       	movw	r20, r14
 368:	96 01       	movw	r18, r12
 36a:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodsi4>
 36e:	3f c0       	rjmp	.+126    	; 0x3ee <PCCommunication_Init_DF+0x16c>
		} else {
			baud <<= exp + 3;
 370:	2c 2f       	mov	r18, r28
 372:	0c 2e       	mov	r0, r28
 374:	00 0c       	add	r0, r0
 376:	33 0b       	sbc	r19, r19
 378:	2d 5f       	subi	r18, 0xFD	; 253
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	46 01       	movw	r8, r12
 37e:	57 01       	movw	r10, r14
 380:	04 c0       	rjmp	.+8      	; 0x38a <PCCommunication_Init_DF+0x108>
 382:	88 0c       	add	r8, r8
 384:	99 1c       	adc	r9, r9
 386:	aa 1c       	adc	r10, r10
 388:	bb 1c       	adc	r11, r11
 38a:	2a 95       	dec	r18
 38c:	d2 f7       	brpl	.-12     	; 0x382 <PCCommunication_Init_DF+0x100>
 38e:	a5 01       	movw	r20, r10
 390:	94 01       	movw	r18, r8
			div = (cpu_hz + baud / 2) / baud;
 392:	75 01       	movw	r14, r10
 394:	64 01       	movw	r12, r8
 396:	f6 94       	lsr	r15
 398:	e7 94       	ror	r14
 39a:	d7 94       	ror	r13
 39c:	c7 94       	ror	r12
 39e:	bc 01       	movw	r22, r24
 3a0:	cd 01       	movw	r24, r26
 3a2:	6c 0d       	add	r22, r12
 3a4:	7d 1d       	adc	r23, r13
 3a6:	8e 1d       	adc	r24, r14
 3a8:	9f 1d       	adc	r25, r15
 3aa:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodsi4>
 3ae:	1f c0       	rjmp	.+62     	; 0x3ee <PCCommunication_Init_DF+0x16c>
		}
	} else {
		baud <<= exp + 3;
 3b0:	8c 2f       	mov	r24, r28
 3b2:	0c 2e       	mov	r0, r28
 3b4:	00 0c       	add	r0, r0
 3b6:	99 0b       	sbc	r25, r25
 3b8:	03 96       	adiw	r24, 0x03	; 3
 3ba:	a7 01       	movw	r20, r14
 3bc:	96 01       	movw	r18, r12
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <PCCommunication_Init_DF+0x146>
 3c0:	22 0f       	add	r18, r18
 3c2:	33 1f       	adc	r19, r19
 3c4:	44 1f       	adc	r20, r20
 3c6:	55 1f       	adc	r21, r21
 3c8:	8a 95       	dec	r24
 3ca:	d2 f7       	brpl	.-12     	; 0x3c0 <PCCommunication_Init_DF+0x13e>
		div = (cpu_hz + baud / 2) / baud - 1;
 3cc:	da 01       	movw	r26, r20
 3ce:	c9 01       	movw	r24, r18
 3d0:	b6 95       	lsr	r27
 3d2:	a7 95       	ror	r26
 3d4:	97 95       	ror	r25
 3d6:	87 95       	ror	r24
 3d8:	bc 01       	movw	r22, r24
 3da:	cd 01       	movw	r24, r26
 3dc:	78 5b       	subi	r23, 0xB8	; 184
 3de:	87 41       	sbci	r24, 0x17	; 23
 3e0:	9e 4f       	sbci	r25, 0xFE	; 254
 3e2:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodsi4>
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	31 09       	sbc	r19, r1
 3ea:	41 09       	sbc	r20, r1
 3ec:	51 09       	sbc	r21, r1
	}

	USARTC0.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 3ee:	83 2f       	mov	r24, r19
 3f0:	8f 70       	andi	r24, 0x0F	; 15
 3f2:	c2 95       	swap	r28
 3f4:	c0 7f       	andi	r28, 0xF0	; 240
 3f6:	c8 2b       	or	r28, r24
 3f8:	e0 ec       	ldi	r30, 0xC0	; 192
 3fa:	f8 e0       	ldi	r31, 0x08	; 8
 3fc:	c7 83       	std	Z+7, r28	; 0x07
	USARTC0.BAUDCTRLA = (uint8_t)div;
 3fe:	26 83       	std	Z+6, r18	; 0x06
	USARTC0.CTRLA     = USART_RXCINTLVL_LO_gc;
 400:	80 e1       	ldi	r24, 0x10	; 16
 402:	82 83       	std	Z+2, r24	; 0x02
	USARTC0.STATUS |= USART_RXCIF_bm;
 404:	81 81       	ldd	r24, Z+1	; 0x01
 406:	80 68       	ori	r24, 0x80	; 128
 408:	81 83       	std	Z+1, r24	; 0x01
	USARTC0.CTRLC = USART_CHSIZE_8BIT_gc;
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	84 83       	std	Z+4, r24	; 0x04
	USARTC0.CTRLC &= ~(USART_PMODE0_bm | USART_PMODE1_bm | USART_SBMODE_bm);
 40e:	84 81       	ldd	r24, Z+4	; 0x04
 410:	87 7c       	andi	r24, 0xC7	; 199
 412:	84 83       	std	Z+4, r24	; 0x04

	USARTC0.CTRLB = 0 << USART_ONEWIRE_bp /* One Wire Mode: disabled */
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	83 83       	std	Z+3, r24	; 0x03
	                | 0 << USART_CLK2X_bp /* Double transmission speed: disabled */
	                | 0 << USART_MPCM_bp  /* Multi-processor Communication Mode: disabled */
	                | 1 << USART_RXEN_bp  /* Receiver Enable: enabled */
	                | 1 << USART_TXEN_bp; /* Transmitter Enable: enabled */
	return 0;
}
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	bf 90       	pop	r11
 428:	af 90       	pop	r10
 42a:	9f 90       	pop	r9
 42c:	8f 90       	pop	r8
 42e:	08 95       	ret

00000430 <TWIM_ErrorHandler>:
	Message.DeviceAddress = DeviceAddress;
	Message.Register = Register;
	Message.Status = TWI_MASTER_REGISTER;

	// Start the transmission by writing the address
	Message.Device->MASTER.ADDR = TWI_WRITE(Message.DeviceAddress);
 430:	e0 e2       	ldi	r30, 0x20	; 32
 432:	f0 e2       	ldi	r31, 0x20	; 32
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	84 87       	std	Z+12, r24	; 0x0c
 438:	01 90       	ld	r0, Z+
 43a:	f0 81       	ld	r31, Z
 43c:	e0 2d       	mov	r30, r0
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	83 83       	std	Z+3, r24	; 0x03
 442:	08 95       	ret

00000444 <TWIM_ArbitrationLostHandler>:
 444:	0e 94 18 02 	call	0x430	; 0x430 <TWIM_ErrorHandler>
 448:	08 95       	ret

0000044a <TWIM_WriteHandler>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <__data_end>
 452:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <__data_end+0x1>
 456:	84 81       	ldd	r24, Z+4	; 0x04
 458:	84 ff       	sbrs	r24, 4
 45a:	03 c0       	rjmp	.+6      	; 0x462 <TWIM_WriteHandler+0x18>
 45c:	0e 94 18 02 	call	0x430	; 0x430 <TWIM_ErrorHandler>
 460:	42 c0       	rjmp	.+132    	; 0x4e6 <TWIM_WriteHandler+0x9c>
 462:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__data_end+0xc>
 466:	81 11       	cpse	r24, r1
 468:	12 c0       	rjmp	.+36     	; 0x48e <TWIM_WriteHandler+0x44>
 46a:	a0 e2       	ldi	r26, 0x20	; 32
 46c:	b0 e2       	ldi	r27, 0x20	; 32
 46e:	13 96       	adiw	r26, 0x03	; 3
 470:	8c 91       	ld	r24, X
 472:	13 97       	sbiw	r26, 0x03	; 3
 474:	87 83       	std	Z+7, r24	; 0x07
 476:	16 96       	adiw	r26, 0x06	; 6
 478:	8c 91       	ld	r24, X
 47a:	88 23       	and	r24, r24
 47c:	21 f0       	breq	.+8      	; 0x486 <TWIM_WriteHandler+0x3c>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <__data_end+0xc>
 484:	30 c0       	rjmp	.+96     	; 0x4e6 <TWIM_WriteHandler+0x9c>
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <__data_end+0xc>
 48c:	2c c0       	rjmp	.+88     	; 0x4e6 <TWIM_WriteHandler+0x9c>
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	71 f4       	brne	.+28     	; 0x4ae <TWIM_WriteHandler+0x64>
 492:	a0 e2       	ldi	r26, 0x20	; 32
 494:	b0 e2       	ldi	r27, 0x20	; 32
 496:	12 96       	adiw	r26, 0x02	; 2
 498:	8c 91       	ld	r24, X
 49a:	12 97       	sbiw	r26, 0x02	; 2
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	81 60       	ori	r24, 0x01	; 1
 4a4:	86 83       	std	Z+6, r24	; 0x06
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	1c 96       	adiw	r26, 0x0c	; 12
 4aa:	8c 93       	st	X, r24
 4ac:	1c c0       	rjmp	.+56     	; 0x4e6 <TWIM_WriteHandler+0x9c>
 4ae:	82 30       	cpi	r24, 0x02	; 2
 4b0:	d1 f4       	brne	.+52     	; 0x4e6 <TWIM_WriteHandler+0x9c>
 4b2:	a0 e2       	ldi	r26, 0x20	; 32
 4b4:	b0 e2       	ldi	r27, 0x20	; 32
 4b6:	15 96       	adiw	r26, 0x05	; 5
 4b8:	8c 91       	ld	r24, X
 4ba:	15 97       	sbiw	r26, 0x05	; 5
 4bc:	14 96       	adiw	r26, 0x04	; 4
 4be:	9c 91       	ld	r25, X
 4c0:	14 97       	sbiw	r26, 0x04	; 4
 4c2:	89 17       	cp	r24, r25
 4c4:	58 f4       	brcc	.+22     	; 0x4dc <TWIM_WriteHandler+0x92>
 4c6:	ed 01       	movw	r28, r26
 4c8:	a8 85       	ldd	r26, Y+8	; 0x08
 4ca:	b9 85       	ldd	r27, Y+9	; 0x09
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	98 0f       	add	r25, r24
 4d0:	9d 83       	std	Y+5, r25	; 0x05
 4d2:	a8 0f       	add	r26, r24
 4d4:	b1 1d       	adc	r27, r1
 4d6:	8c 91       	ld	r24, X
 4d8:	87 83       	std	Z+7, r24	; 0x07
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <TWIM_WriteHandler+0x9c>
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	83 83       	std	Z+3, r24	; 0x03
 4e0:	84 e0       	ldi	r24, 0x04	; 4
 4e2:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <__data_end+0xc>
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <TWIM_ReadHandler>:
 4ec:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__data_end+0xc>
 4f0:	83 30       	cpi	r24, 0x03	; 3
 4f2:	c1 f5       	brne	.+112    	; 0x564 <TWIM_ReadHandler+0x78>
 4f4:	80 91 27 20 	lds	r24, 0x2027	; 0x802027 <__data_end+0x7>
 4f8:	88 30       	cpi	r24, 0x08	; 8
 4fa:	a0 f4       	brcc	.+40     	; 0x524 <TWIM_ReadHandler+0x38>
 4fc:	a0 e2       	ldi	r26, 0x20	; 32
 4fe:	b0 e2       	ldi	r27, 0x20	; 32
 500:	1a 96       	adiw	r26, 0x0a	; 10
 502:	ed 91       	ld	r30, X+
 504:	fc 91       	ld	r31, X
 506:	1b 97       	sbiw	r26, 0x0b	; 11
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	98 0f       	add	r25, r24
 50c:	17 96       	adiw	r26, 0x07	; 7
 50e:	9c 93       	st	X, r25
 510:	17 97       	sbiw	r26, 0x07	; 7
 512:	e8 0f       	add	r30, r24
 514:	f1 1d       	adc	r31, r1
 516:	0d 90       	ld	r0, X+
 518:	bc 91       	ld	r27, X
 51a:	a0 2d       	mov	r26, r0
 51c:	17 96       	adiw	r26, 0x07	; 7
 51e:	8c 91       	ld	r24, X
 520:	80 83       	st	Z, r24
 522:	09 c0       	rjmp	.+18     	; 0x536 <TWIM_ReadHandler+0x4a>
 524:	e0 e2       	ldi	r30, 0x20	; 32
 526:	f0 e2       	ldi	r31, 0x20	; 32
 528:	a0 81       	ld	r26, Z
 52a:	b1 81       	ldd	r27, Z+1	; 0x01
 52c:	87 e0       	ldi	r24, 0x07	; 7
 52e:	13 96       	adiw	r26, 0x03	; 3
 530:	8c 93       	st	X, r24
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	84 87       	std	Z+12, r24	; 0x0c
 536:	e0 e2       	ldi	r30, 0x20	; 32
 538:	f0 e2       	ldi	r31, 0x20	; 32
 53a:	97 81       	ldd	r25, Z+7	; 0x07
 53c:	86 81       	ldd	r24, Z+6	; 0x06
 53e:	98 17       	cp	r25, r24
 540:	38 f4       	brcc	.+14     	; 0x550 <TWIM_ReadHandler+0x64>
 542:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <__data_end>
 546:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <__data_end+0x1>
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	83 83       	std	Z+3, r24	; 0x03
 54e:	08 95       	ret
 550:	e0 e2       	ldi	r30, 0x20	; 32
 552:	f0 e2       	ldi	r31, 0x20	; 32
 554:	a0 81       	ld	r26, Z
 556:	b1 81       	ldd	r27, Z+1	; 0x01
 558:	87 e0       	ldi	r24, 0x07	; 7
 55a:	13 96       	adiw	r26, 0x03	; 3
 55c:	8c 93       	st	X, r24
 55e:	85 e0       	ldi	r24, 0x05	; 5
 560:	84 87       	std	Z+12, r24	; 0x0c
 562:	08 95       	ret
 564:	0e 94 18 02 	call	0x430	; 0x430 <TWIM_ErrorHandler>
 568:	08 95       	ret

0000056a <TWIM_InitInterrupt>:
 56a:	e0 e8       	ldi	r30, 0x80	; 128
 56c:	f4 e0       	ldi	r31, 0x04	; 4
 56e:	10 82       	st	Z, r1
 570:	80 ea       	ldi	r24, 0xA0	; 160
 572:	85 83       	std	Z+5, r24	; 0x05
 574:	88 e7       	ldi	r24, 0x78	; 120
 576:	81 83       	std	Z+1, r24	; 0x01
 578:	12 82       	std	Z+2, r1	; 0x02
 57a:	84 81       	ldd	r24, Z+4	; 0x04
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	84 83       	std	Z+4, r24	; 0x04
 580:	08 95       	ret

00000582 <TWIM_Transmit>:
 582:	e0 e2       	ldi	r30, 0x20	; 32
 584:	f0 e2       	ldi	r31, 0x20	; 32
 586:	12 86       	std	Z+10, r1	; 0x0a
 588:	13 86       	std	Z+11, r1	; 0x0b
 58a:	16 82       	std	Z+6, r1	; 0x06
 58c:	15 82       	std	Z+5, r1	; 0x05
 58e:	20 87       	std	Z+8, r18	; 0x08
 590:	31 87       	std	Z+9, r19	; 0x09
 592:	44 83       	std	Z+4, r20	; 0x04
 594:	a0 e8       	ldi	r26, 0x80	; 128
 596:	b4 e0       	ldi	r27, 0x04	; 4
 598:	a0 83       	st	Z, r26
 59a:	b1 83       	std	Z+1, r27	; 0x01
 59c:	82 83       	std	Z+2, r24	; 0x02
 59e:	63 83       	std	Z+3, r22	; 0x03
 5a0:	14 86       	std	Z+12, r1	; 0x0c
 5a2:	88 0f       	add	r24, r24
 5a4:	16 96       	adiw	r26, 0x06	; 6
 5a6:	8c 93       	st	X, r24
 5a8:	08 95       	ret

000005aa <TWIM_Status>:
}

TWI_MasterStatus_t TWIM_Status(void) {
	return Message.Status;
}
 5aa:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__data_end+0xc>
 5ae:	08 95       	ret

000005b0 <__vector_11>:

ISR(TWIC_TWIM_vect) {
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
	uint8_t Status = Message.Device->MASTER.STATUS;
 5d2:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <__data_end>
 5d6:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <__data_end+0x1>
 5da:	84 81       	ldd	r24, Z+4	; 0x04

	/*
		Arbitration lost
	*/
	if(Status & TWI_MASTER_ARBLOST_bm) {
 5dc:	83 ff       	sbrs	r24, 3
 5de:	03 c0       	rjmp	.+6      	; 0x5e6 <__vector_11+0x36>
		TWIM_ArbitrationLostHandler();
 5e0:	0e 94 22 02 	call	0x444	; 0x444 <TWIM_ArbitrationLostHandler>
 5e4:	0c c0       	rjmp	.+24     	; 0x5fe <__vector_11+0x4e>
	}
	/*
		Write interrupt
	*/
	else if(Status & TWI_MASTER_WIF_bm) {
 5e6:	86 ff       	sbrs	r24, 6
 5e8:	03 c0       	rjmp	.+6      	; 0x5f0 <__vector_11+0x40>
		TWIM_WriteHandler();
 5ea:	0e 94 25 02 	call	0x44a	; 0x44a <TWIM_WriteHandler>
 5ee:	07 c0       	rjmp	.+14     	; 0x5fe <__vector_11+0x4e>
	}
	/*
		Read interrupt
	*/
	else if(Status & TWI_MASTER_RIF_bm) {
 5f0:	88 23       	and	r24, r24
 5f2:	1c f4       	brge	.+6      	; 0x5fa <__vector_11+0x4a>
		TWIM_ReadHandler();
 5f4:	0e 94 76 02 	call	0x4ec	; 0x4ec <TWIM_ReadHandler>
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <__vector_11+0x4e>
	}
	/*
		Error
	*/
	else {
		TWIM_ErrorHandler();
 5fa:	0e 94 18 02 	call	0x430	; 0x430 <TWIM_ErrorHandler>
	}
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <__udivmodsi4>:
 620:	a1 e2       	ldi	r26, 0x21	; 33
 622:	1a 2e       	mov	r1, r26
 624:	aa 1b       	sub	r26, r26
 626:	bb 1b       	sub	r27, r27
 628:	fd 01       	movw	r30, r26
 62a:	0d c0       	rjmp	.+26     	; 0x646 <__udivmodsi4_ep>

0000062c <__udivmodsi4_loop>:
 62c:	aa 1f       	adc	r26, r26
 62e:	bb 1f       	adc	r27, r27
 630:	ee 1f       	adc	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	a2 17       	cp	r26, r18
 636:	b3 07       	cpc	r27, r19
 638:	e4 07       	cpc	r30, r20
 63a:	f5 07       	cpc	r31, r21
 63c:	20 f0       	brcs	.+8      	; 0x646 <__udivmodsi4_ep>
 63e:	a2 1b       	sub	r26, r18
 640:	b3 0b       	sbc	r27, r19
 642:	e4 0b       	sbc	r30, r20
 644:	f5 0b       	sbc	r31, r21

00000646 <__udivmodsi4_ep>:
 646:	66 1f       	adc	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	1a 94       	dec	r1
 650:	69 f7       	brne	.-38     	; 0x62c <__udivmodsi4_loop>
 652:	60 95       	com	r22
 654:	70 95       	com	r23
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	9b 01       	movw	r18, r22
 65c:	ac 01       	movw	r20, r24
 65e:	bd 01       	movw	r22, r26
 660:	cf 01       	movw	r24, r30
 662:	08 95       	ret

00000664 <_exit>:
 664:	f8 94       	cli

00000666 <__stop_program>:
 666:	ff cf       	rjmp	.-2      	; 0x666 <__stop_program>
